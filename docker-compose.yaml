version: '3.9'

services:

# ---------- user service ----------
  user-server:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      my-redis:
        condition: service_started
      user-mysql:
        condition: service_healthy
    env_file:
      - ./pre-order.env
    networks:
      - pre-order-network
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://user-mysql:3306"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
  user-mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      MYSQL_DATABASE: user-db
      MYSQL_USER: sa
      MYSQL_PASSWORD: 1234
    ports:
      - "3306:3306"
    restart: always
    networks:
      - pre-order-network
    healthcheck:
      test: [ "CMD", "mysql", "-h", "user-mysql", "-u", "sa", "-p1234", "-e", "SELECT 1" ]
      interval: 5s
      timeout: 3s
      retries: 10

# ---------- newsfeed service ----------
  newsfeed-service:
    build:
      context: ./newsfeed-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      newsfeed-mysql:
        condition: service_healthy
    env_file:
      - ./pre-order.env
    networks:
      - pre-order-network
#
  newsfeed-mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      MYSQL_DATABASE: newsfeed-db
      MYSQL_USER: sa
      MYSQL_PASSWORD: 1234
    ports:
      - "3307:3306"
    restart: always
    networks:
      - pre-order-network
    healthcheck:
      test: [ "CMD", "mysql", "-h", "newsfeed-mysql", "-u", "sa", "-p1234", "-e", "SELECT 1" ]
      interval: 5s
      timeout: 3s
      retries: 10
## ---------- activity service ----------
  activity-server:
    build:
      context: ./activity-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      activity-mysql:
        condition: service_healthy
    env_file:
      - ./pre-order.env
    networks:
      - pre-order-network
#
  activity-mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      MYSQL_DATABASE: activity-db
      MYSQL_USER: sa
      MYSQL_PASSWORD: 1234
    ports:
      - "3308:3306"
    restart: always
    networks:
      - pre-order-network
    healthcheck:
      test: [ "CMD", "mysql", "-h", "activity-mysql", "-u", "sa", "-p1234", "-e", "SELECT 1" ]
      interval: 5s
      timeout: 3s
      retries: 10
# ----------- Eureka Service ---------
  eureka-server:
    build:
      context: ./eureka-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8761:8761"
    networks:
      - pre-order-network
    env_file:
      - ./pre-order.env

# ------------ Gateway Service ----------
  gateway-server:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - my-redis
      - eureka-server
    env_file:
      - ./pre-order.env
    ports:
      - "8000:8000"
    networks:
      - pre-order-network
#
  my-redis:
    image: redis:7.2.4
    ports:
      - "6379:6379"
    networks:
      - pre-order-network
# ---------- Messaging Service ---------

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - pre-order-network
  kafka-service:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka-service
#      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "ACTIVITY_EVENT:1:1"
      AUTO_CREATE_TOPICS: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - pre-order-network
    depends_on:
      - zookeeper

networks:
  pre-order-network:
    driver: bridge